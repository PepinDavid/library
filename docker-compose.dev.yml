version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    hostname: ${RABBITMQ_HOSTNAME}
    container_name: ${RABBITMQ_NAME}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_HTTP_PORT}:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  library-psql:
    hostname: ${POSTGRES_HOSTNAME}
    container_name: ${POSTGRES_NAME}
    restart: always
    build:
      context: ./library-psql
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATABASE=${POSTGRES_DB}
    volumes:
      - library_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  analytics-mongo:
    hostname: ${MONGO_HOSTNAME}
    container_name: ${MONGO_NAME}
    restart: always
    build:
      context: ./analytics-mongo
      dockerfile: Dockerfile
      args:
        MONGO_USERNAME: ${MONGO_USERNAME}
        MONGO_PASSWORD: ${MONGO_PASSWORD}
        MONGO_DATABASE: ${MONGO_DATABASE}
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DATABASE=${MONGO_DATABASE}
    volumes:
      - analytics_mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    
  library-service:
    hostname: ${LIBRARY_SERVICE_HOSTNAME}
    container_name: ${LIBRARY_SERVICE_NAME}
    build:
      context: ./library-service
      dockerfile: Dockerfile.dev
    environment:
      - DB_HOST=${POSTGRES_NAME}
      - DB_PORT=${POSTGRES_PORT}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_SECRET=${JWT_SECRET}
      - TARGET=${TARGET}
      - SERVER_PORT=${SERVER_PORT}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOSTNAME}
      - RABBITMQ_PORT=${RABBITMQ_AMQP_PORT}
    working_dir: /usr/src/app
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      library-psql:
        condition: service_healthy
    command: ["sh", "-c", "npm run dev-docker"]

  analytics-service:
    hostname: ${ANALYTICS_HOSTNAME}
    container_name: ${ANALYTICS_NAME}
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
      args:
        MONGODB_URI: ${MONGODB_URI}
        RABBITMQ_URL: ${RABBITMQ_URL}
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - RABBITMQ_URL=${RABBITMQ_URL}
    working_dir: /usr/src/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: ["sh", "-c", "npm run start:dev"]

volumes:
  library_postgres_data:
  analytics_mongo_data: